import ijson
import argparse
from lxml import etree as ET
from datetime import datetime
import random
import logging
from typing import Iterable
from os import sys
from memory_profiler import profile

# ANSI color codes for text formatting in the main function
MAGENTA = "\033[35m"
RESET = "\033[0m"
GREEN = "\033[32m"
CYAN = "\033[96m"

# Configure the logging system
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger()

def create_parser():
    parser = argparse.ArgumentParser(prog='converter.py', description="Convert JSON reviews to XML by processing it sequentially")
    parser.add_argument('--json_file', type=str, help="JSON file name with the reviews", required=True)
    parser.add_argument('--xml_train', type=str, help="Output file for the train set in XML format.", required=True)
    parser.add_argument('--xml_test', type=str, help="Output file for the test set in XML format", required=True)
    parser.add_argument('-n', type=int, help="Reservoir size for the test set. These are the reviews that will be written to --xml_test", required=True)
    return parser.parse_args()

# Function generated by ChatGPT (with minor modifications)
# Prompt used: " If i have a date in the format of "2015-09-23 23:10:31", how can i determine if that date was a weekend (saturday/sunday) or not in python?"
def check_weekend(date: str) -> bool:
    date_obj = datetime.strptime(date, "%Y-%m-%d %H:%M:%S")
    return date_obj.weekday() in (5, 6)

def write_to_xml(review: dict) -> ET.Element:
    """Creates an XML representation of the input, which is a single review"""
    review_element = ET.Element("review")
    ET.SubElement(review_element, "review_id").text = review["review_id"]
    ET.SubElement(review_element, "user_id").text = review["user_id"]
    ET.SubElement(review_element, "business_id").text = review["business_id"]

    ratings = ET.SubElement(review_element, "ratings")
    ratings.set("stars", str(review["stars"]))
    ratings.set("useful", str(review["useful"]))
    ratings.set("funny", str(review["funny"]))
    ratings.set("cool", str(review["cool"]))

    ET.SubElement(review_element, "text").text = review["text"]

    date = datetime.strptime(review["date"], "%Y-%m-%d %H:%M:%S")
    date_element = ET.SubElement(review_element, "date")
    date_element.set("year", str(date.year))
    date_element.set("month", str(date.month))
    date_element.set("day", str(date.day))
    date_element.set("weekday", date.strftime("%A"))

    return review_element

def extract(json_file, n):
    """Extracts the reviews that were made on the weekend and separates them into reservoir (test) and training sets. Additionally, it also counts them."""
    test_set = []
    train_set = []
    json_count = 0
    test_count = 0
    train_count = 0

    def review_generator():
        nonlocal json_count, test_count, train_count
        for x in ijson.items(open(json_file), "item"):
            json_count += 1
            if check_weekend(x["date"]):
                xml_review = write_to_xml(x)
                if len(test_set) < n:
                    test_set.append(xml_review)
                    test_count += 1
                else:
                    random_num = random.randint(0, json_count - 1)
                    if random_num < n:
                        train_set.append(test_set[random_num])
                        test_set[random_num] = xml_review
                    else:
                        train_set.append(xml_review)
                    train_count += 1
            yield test_set, train_set

    return review_generator(), lambda: (json_count, test_count, train_count)

@profile
def convert(json_file: str, xml_train: str, xml_test: str, reservoir_size: int):
    reviews, get_counts = extract(json_file, reservoir_size)

    root_test = ET.Element("root")
    root_train = ET.Element("root")

    for test_set, train_set in reviews:
        for xml_review in test_set:
            root_test.append(xml_review)
        for xml_review in train_set:
            root_train.append(xml_review)

    tree_test = ET.ElementTree(root_test)
    tree_train = ET.ElementTree(root_train)

    with open(xml_train, "wb") as train, open(xml_test, "wb") as test:
        tree_test.write(test, pretty_print=True, xml_declaration=True, encoding="utf-8")
        tree_train.write(train, pretty_print=True, xml_declaration=True, encoding="utf-8")

    return get_counts()

def main():
    args = create_parser()

    print("")
    print("INPUTS OVERVIEW:")
    print(f"Python Syript Name: {GREEN}{sys.argv[0]}{RESET}")
    print(f"JSON File: {GREEN}{args.json_file}{RESET}")
    print(f"XML Train Output File Name: {GREEN}{args.xml_train}{RESET}")
    print(f"XML Test Output File Name: {GREEN}{args.xml_test}{RESET}")
    print(f"Reservoir Size: {GREEN}{args.n}{RESET}")
    print("")

    print(f"MEMORY OVERVIEW:{MAGENTA}")

    json_count, xml_test_count, xml_train_count = convert(args.json_file, args.xml_train, args.xml_test, args.n)
    print(f"{RESET}")
    print("OUTPUT OVERVIEW:")
    logging.info(f"{CYAN}Processed {json_count} reviews from file {args.json_file}{RESET}")
    logging.info(f"{CYAN}Written {xml_train_count} reviews to {args.xml_train}{RESET}")
    logging.info(f"{CYAN}Written {xml_test_count} reviews to {args.xml_test}{RESET}")
    print("\n")

if __name__ == '__main__':
    main()
